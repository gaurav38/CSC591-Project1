typedef unsigned_int32 Label;

class Node {
	Label label;	//label of the node
	vector<unsigned_int32> neighbors;	//vector to store the neighbors of the node
	std::unordered_map<Label,_int16> mymap;		//hashmap to store the list of labels and their count
	unsigned_int32 count;
	
	methods:
	
	Node(Label node_label) {
		//Constructor to initialize Node with label node_label
		// insert(node_label,1) in mymap
	}
	
	GetNeighbors() {
		//return a vector of neighbors
	}
	
	AddNeighbor(Label x) {
		//Add x to the vector of neighbors
	}
	
	GetCount() {
		//Get the value of "count"
	}
	
	isCommunityPresent(Label x) {
		//Return true if community x is in mymap
	}
	
	AddCommunity(Label x) {
		//insert(x,1) to mymap if x not already present, increment the count of x otherwise
	}
	
	GetCommunityCount(Label x) {
		//Return the count of the community x from mymap
	}
	
	GetCountAll() {
		//Return <label,count> of all different labels in mymap
	}
	
	GetMaxLabel() {
		//Return the label having the highest count in mymap
	}
	
	FindDistributionAll() {
		//Calculate probability distribution of all the labels in mymap
	}
}
		
	
	
	